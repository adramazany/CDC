{
  "name" : "mysql_localhost_test_dbz_source",
  "config" : {
    "connector.class" : "io.debezium.connector.mysql.MySqlConnector",
    "database.hostname" : "localhost",
    "database.user" : "test",
    "database.password" : "test",
    "database.server.name" : "test",
    "database.history.kafka.topic" : "t_mysql_history",
    "database.history.kafka.bootstrap.servers" : "localhost:9092",
    "include.schema.changes" : "false",
    "snapshot.mode" : "initial"
  }
}

//"table.include.list" : "test.test",

/*
message.key.columns :
  : A semi-colon list of regular expressions that match fully-qualified tables and columns to map a primary key.
Each item (regular expression) must match the <fully-qualified table>:<a comma-separated list of columns> representing the custom key.
Fully-qualified tables could be defined as DB_NAME.TABLE_NAME or SCHEMA_NAME.TABLE_NAME, depending on the specific connector.

snapshot.mode: initial/when_needed/never/schema_only/schema_only_recovery/
 : Specifies the criteria for running a snapshot upon startup of the connector. The default is initial, and specifies the connector can run a snapshot only when no offsets have been recorded for the logical server name. The when_needed option specifies that the connector run a snapshot upon startup whenever it deems it necessary (when no offsets are available, or when a previously recorded offset specifies a binlog location or GTID that is not available in the server). The never option specifies that the connect should never use snapshots and that upon first startup with a logical server name the connector should read from the beginning of the binlog; this should be used with care, as it is only valid when the binlog is guaranteed to contain the entire history of the database. If you donâ€™t need the topics to contain a consistent snapshot of the data but only need them to have the changes since the connector was started, you can use the schema_only option, where the connector only snapshots the schemas (not the data). schema_only_recovery is a recovery option for an existing connector to recover a corrupted or lost database history topic, or to periodically "clean up" a database history topic (which requires infinite retention) that may be growing unexpectedly.

*/